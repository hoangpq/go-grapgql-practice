{"dependencies":[{"name":"graphql/language/kinds","loc":{"line":8,"column":21}},{"name":"graphql","loc":{"line":10,"column":23}},{"name":"./getAutocompleteSuggestions","loc":{"line":12,"column":43}},{"name":"./getDiagnostics","loc":{"line":14,"column":30}},{"name":"./getDefinition","loc":{"line":16,"column":29}},{"name":"graphql-language-service-utils","loc":{"line":18,"column":43}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLLanguageService = undefined;\n\nvar _kinds = require('graphql/language/kinds');\n\nvar _graphql = require('graphql');\n\nvar _getAutocompleteSuggestions2 = require('./getAutocompleteSuggestions');\n\nvar _getDiagnostics = require('./getDiagnostics');\n\nvar _getDefinition = require('./getDefinition');\n\nvar _graphqlLanguageServiceUtils = require('graphql-language-service-utils');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           *  Copyright (c) Facebook, Inc.\n                                                                                                                                                           *  All rights reserved.\n                                                                                                                                                           *\n                                                                                                                                                           *  This source code is licensed under the license found in the\n                                                                                                                                                           *  LICENSE file in the root directory of this source tree.\n                                                                                                                                                           *\n                                                                                                                                                           *  \n                                                                                                                                                           */\n\nvar GraphQLLanguageService = exports.GraphQLLanguageService = function () {\n  function GraphQLLanguageService(cache) {\n    _classCallCheck(this, GraphQLLanguageService);\n\n    this._graphQLCache = cache;\n    this._graphQLConfig = cache.getGraphQLConfig();\n  }\n\n  GraphQLLanguageService.prototype.getDiagnostics = function getDiagnostics(query, uri, isRelayCompatMode) {\n    var queryHasExtensions, projectConfig, schemaPath, queryAST, range, source, fragmentDefinitions, fragmentDependencies, dependenciesSource, validationAst, schema, customRules, customRulesModulePath, rulesPath;\n    return regeneratorRuntime.async(function getDiagnostics$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // Perform syntax diagnostics first, as this doesn't require\n            // schema/fragment definitions, even the project configuration.\n            queryHasExtensions = false;\n            projectConfig = this._graphQLConfig.getConfigForFile(uri);\n            schemaPath = projectConfig.schemaPath;\n            _context.prev = 3;\n            queryAST = (0, _graphql.parse)(query);\n\n            if (!schemaPath || uri !== schemaPath) {\n              queryHasExtensions = queryAST.definitions.some(function (definition) {\n                switch (definition.kind) {\n                  case _kinds.OBJECT_TYPE_DEFINITION:\n                  case _kinds.INTERFACE_TYPE_DEFINITION:\n                  case _kinds.ENUM_TYPE_DEFINITION:\n                  case _kinds.UNION_TYPE_DEFINITION:\n                  case _kinds.SCALAR_TYPE_DEFINITION:\n                  case _kinds.INPUT_OBJECT_TYPE_DEFINITION:\n                  case _kinds.TYPE_EXTENSION_DEFINITION:\n                  case _kinds.DIRECTIVE_DEFINITION:\n                    return true;\n                }\n                return false;\n              });\n            }\n            _context.next = 12;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context['catch'](3);\n            range = (0, _getDiagnostics.getRange)(_context.t0.locations[0], query);\n            return _context.abrupt('return', [{\n              severity: _getDiagnostics.SEVERITY.ERROR,\n              message: _context.t0.message,\n              source: 'GraphQL: Syntax',\n              range: range\n            }]);\n\n          case 12:\n            if (schemaPath) {\n              _context.next = 14;\n              break;\n            }\n\n            return _context.abrupt('return', []);\n\n          case 14:\n\n            // If there's a matching config, proceed to prepare to run validation\n            source = query;\n            _context.next = 17;\n            return regeneratorRuntime.awrap(this._graphQLCache.getFragmentDefinitions(projectConfig));\n\n          case 17:\n            fragmentDefinitions = _context.sent;\n            _context.next = 20;\n            return regeneratorRuntime.awrap(this._graphQLCache.getFragmentDependencies(query, fragmentDefinitions));\n\n          case 20:\n            fragmentDependencies = _context.sent;\n            dependenciesSource = fragmentDependencies.reduce(function (prev, cur) {\n              return prev + ' ' + (0, _graphql.print)(cur.definition);\n            }, '');\n\n\n            source = source + ' ' + dependenciesSource;\n\n            validationAst = null;\n            _context.prev = 24;\n\n            validationAst = (0, _graphql.parse)(source);\n            _context.next = 31;\n            break;\n\n          case 28:\n            _context.prev = 28;\n            _context.t1 = _context['catch'](24);\n            return _context.abrupt('return', []);\n\n          case 31:\n            _context.next = 33;\n            return regeneratorRuntime.awrap(this._graphQLCache.getSchema(projectConfig.projectName, queryHasExtensions));\n\n          case 33:\n            schema = _context.sent;\n\n\n            // Check if there are custom validation rules to be used\n            customRules = void 0;\n            customRulesModulePath = projectConfig.extensions.customValidationRules;\n\n            if (customRulesModulePath) {\n              /* eslint-disable no-implicit-coercion */\n              rulesPath = require.resolve('' + customRulesModulePath);\n\n              if (rulesPath) {\n                customRules = require('' + rulesPath)(this._graphQLConfig);\n              }\n              /* eslint-enable no-implicit-coercion */\n            }\n\n            return _context.abrupt('return', (0, _getDiagnostics.validateQuery)(validationAst, schema, customRules, isRelayCompatMode));\n\n          case 38:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, null, this, [[3, 8], [24, 28]]);\n  };\n\n  GraphQLLanguageService.prototype.getAutocompleteSuggestions = function getAutocompleteSuggestions(query, position, filePath) {\n    var projectConfig, schema;\n    return regeneratorRuntime.async(function getAutocompleteSuggestions$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            projectConfig = this._graphQLConfig.getConfigForFile(filePath);\n\n            if (!projectConfig.schemaPath) {\n              _context2.next = 7;\n              break;\n            }\n\n            _context2.next = 4;\n            return regeneratorRuntime.awrap(this._graphQLCache.getSchema(projectConfig.projectName));\n\n          case 4:\n            schema = _context2.sent;\n\n            if (!schema) {\n              _context2.next = 7;\n              break;\n            }\n\n            return _context2.abrupt('return', (0, _getAutocompleteSuggestions2.getAutocompleteSuggestions)(schema, query, position));\n\n          case 7:\n            return _context2.abrupt('return', []);\n\n          case 8:\n          case 'end':\n            return _context2.stop();\n        }\n      }\n    }, null, this);\n  };\n\n  GraphQLLanguageService.prototype.getDefinition = function getDefinition(query, position, filePath) {\n    var projectConfig, ast, node;\n    return regeneratorRuntime.async(function getDefinition$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            projectConfig = this._graphQLConfig.getConfigForFile(filePath);\n            ast = void 0;\n            _context3.prev = 2;\n\n            ast = (0, _graphql.parse)(query);\n            _context3.next = 9;\n            break;\n\n          case 6:\n            _context3.prev = 6;\n            _context3.t0 = _context3['catch'](2);\n            return _context3.abrupt('return', null);\n\n          case 9:\n            node = (0, _graphqlLanguageServiceUtils.getASTNodeAtPosition)(query, ast, position);\n\n            if (!node) {\n              _context3.next = 16;\n              break;\n            }\n\n            _context3.t1 = node.kind;\n            _context3.next = _context3.t1 === _kinds.FRAGMENT_SPREAD ? 14 : _context3.t1 === _kinds.FRAGMENT_DEFINITION ? 15 : _context3.t1 === _kinds.OPERATION_DEFINITION ? 15 : 16;\n            break;\n\n          case 14:\n            return _context3.abrupt('return', this._getDefinitionForFragmentSpread(query, ast, node, filePath, projectConfig));\n\n          case 15:\n            return _context3.abrupt('return', (0, _getDefinition.getDefinitionQueryResultForDefinitionNode)(filePath, query, node));\n\n          case 16:\n            return _context3.abrupt('return', null);\n\n          case 17:\n          case 'end':\n            return _context3.stop();\n        }\n      }\n    }, null, this, [[2, 6]]);\n  };\n\n  GraphQLLanguageService.prototype._getDefinitionForFragmentSpread = function _getDefinitionForFragmentSpread(query, ast, node, filePath, projectConfig) {\n    var fragmentDefinitions, dependencies, localFragDefinitions, typeCastedDefs, localFragInfos, result;\n    return regeneratorRuntime.async(function _getDefinitionForFragmentSpread$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return regeneratorRuntime.awrap(this._graphQLCache.getFragmentDefinitions(projectConfig));\n\n          case 2:\n            fragmentDefinitions = _context4.sent;\n            _context4.next = 5;\n            return regeneratorRuntime.awrap(this._graphQLCache.getFragmentDependenciesForAST(ast, fragmentDefinitions));\n\n          case 5:\n            dependencies = _context4.sent;\n            localFragDefinitions = ast.definitions.filter(function (definition) {\n              return definition.kind === _kinds.FRAGMENT_DEFINITION;\n            });\n            typeCastedDefs = localFragDefinitions;\n            localFragInfos = typeCastedDefs.map(function (definition) {\n              return {\n                filePath: filePath,\n                content: query,\n                definition: definition\n              };\n            });\n            _context4.next = 11;\n            return regeneratorRuntime.awrap((0, _getDefinition.getDefinitionQueryResultForFragmentSpread)(query, node, dependencies.concat(localFragInfos)));\n\n          case 11:\n            result = _context4.sent;\n            return _context4.abrupt('return', result);\n\n          case 13:\n          case 'end':\n            return _context4.stop();\n        }\n      }\n    }, null, this);\n  };\n\n  return GraphQLLanguageService;\n}();"},"hash":"2961edec3f74c341f3353b48ff8fc741"}