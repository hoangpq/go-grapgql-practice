{"dependencies":[{"name":"codemirror","loc":{"line":3,"column":26}},{"name":"graphql","loc":{"line":7,"column":23}},{"name":"../utils/jsonParse","loc":{"line":9,"column":25}}],"generated":{"js":"'use strict';\n\nvar _codemirror = require('codemirror');\n\nvar _codemirror2 = _interopRequireDefault(_codemirror);\n\nvar _graphql = require('graphql');\n\nvar _jsonParse = require('../utils/jsonParse');\n\nvar _jsonParse2 = _interopRequireDefault(_jsonParse);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Registers a \"lint\" helper for CodeMirror.\n *\n * Using CodeMirror's \"lint\" addon: https://codemirror.net/demo/lint.html\n * Given the text within an editor, this helper will take that text and return\n * a list of linter issues ensuring that correct variables were provided.\n *\n * Options:\n *\n *   - variableToType: { [variable: string]: GraphQLInputType }\n *\n */\n_codemirror2.default.registerHelper('lint', 'graphql-variables', function (text, options, editor) {\n  // If there's no text, do nothing.\n  if (!text) {\n    return [];\n  }\n\n  // First, linter needs to determine if there are any parsing errors.\n  var ast = void 0;\n  try {\n    ast = (0, _jsonParse2.default)(text);\n  } catch (syntaxError) {\n    if (syntaxError.stack) {\n      throw syntaxError;\n    }\n    return [lintError(editor, syntaxError, syntaxError.message)];\n  }\n\n  // If there are not yet known variables, do nothing.\n  var variableToType = options.variableToType;\n  if (!variableToType) {\n    return [];\n  }\n\n  // Then highlight any issues with the provided variables.\n  return validateVariables(editor, variableToType, ast);\n});\n\n// Given a variableToType object, a source text, and a JSON AST, produces a\n// list of CodeMirror annotations for any variable validation errors.\n/* eslint-disable max-len */\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nfunction validateVariables(editor, variableToType, variablesAST) {\n  var errors = [];\n\n  variablesAST.members.forEach(function (member) {\n    var variableName = member.key.value;\n    var type = variableToType[variableName];\n    if (!type) {\n      errors.push(lintError(editor, member.key, 'Variable \"$' + variableName + '\" does not appear in any GraphQL query.'));\n    } else {\n      validateValue(type, member.value).forEach(function (_ref) {\n        var node = _ref[0],\n            message = _ref[1];\n\n        errors.push(lintError(editor, node, message));\n      });\n    }\n  });\n\n  return errors;\n}\n\n// Returns a list of validation errors in the form Array<[Node, String]>.\nfunction validateValue(type, valueAST) {\n  // Validate non-nullable values.\n  if (type instanceof _graphql.GraphQLNonNull) {\n    if (valueAST.kind === 'Null') {\n      return [[valueAST, 'Type \"' + type + '\" is non-nullable and cannot be null.']];\n    }\n    return validateValue(type.ofType, valueAST);\n  }\n\n  if (valueAST.kind === 'Null') {\n    return [];\n  }\n\n  // Validate lists of values, accepting a non-list as a list of one.\n  if (type instanceof _graphql.GraphQLList) {\n    var itemType = type.ofType;\n    if (valueAST.kind === 'Array') {\n      return mapCat(valueAST.values, function (item) {\n        return validateValue(itemType, item);\n      });\n    }\n    return validateValue(itemType, valueAST);\n  }\n\n  // Validate input objects.\n  if (type instanceof _graphql.GraphQLInputObjectType) {\n    if (valueAST.kind !== 'Object') {\n      return [[valueAST, 'Type \"' + type + '\" must be an Object.']];\n    }\n\n    // Validate each field in the input object.\n    var providedFields = Object.create(null);\n    var fieldErrors = mapCat(valueAST.members, function (member) {\n      var fieldName = member.key.value;\n      providedFields[fieldName] = true;\n      var inputField = type.getFields()[fieldName];\n      if (!inputField) {\n        return [[member.key, 'Type \"' + type + '\" does not have a field \"' + fieldName + '\".']];\n      }\n      var fieldType = inputField ? inputField.type : undefined;\n      return validateValue(fieldType, member.value);\n    });\n\n    // Look for missing non-nullable fields.\n    Object.keys(type.getFields()).forEach(function (fieldName) {\n      if (!providedFields[fieldName]) {\n        var fieldType = type.getFields()[fieldName].type;\n        if (fieldType instanceof _graphql.GraphQLNonNull) {\n          fieldErrors.push([valueAST, 'Object of type \"' + type + '\" is missing required field \"' + fieldName + '\".']);\n        }\n      }\n    });\n\n    return fieldErrors;\n  }\n\n  // Validate common scalars.\n  if (type.name === 'Boolean' && valueAST.kind !== 'Boolean' || type.name === 'String' && valueAST.kind !== 'String' || type.name === 'ID' && valueAST.kind !== 'Number' && valueAST.kind !== 'String' || type.name === 'Float' && valueAST.kind !== 'Number' || type.name === 'Int' && (valueAST.kind !== 'Number' || (valueAST.value | 0) !== valueAST.value)) {\n    return [[valueAST, 'Expected value of type \"' + type + '\".']];\n  }\n\n  // Validate enums and custom scalars.\n  if (type instanceof _graphql.GraphQLEnumType || type instanceof _graphql.GraphQLScalarType) {\n    if (valueAST.kind !== 'String' && valueAST.kind !== 'Number' && valueAST.kind !== 'Boolean' && valueAST.kind !== 'Null' || isNullish(type.parseValue(valueAST.value))) {\n      return [[valueAST, 'Expected value of type \"' + type + '\".']];\n    }\n  }\n\n  return [];\n}\n\n// Give a parent text, an AST node with location, and a message, produces a\n// CodeMirror annotation object.\nfunction lintError(editor, node, message) {\n  return {\n    message: message,\n    severity: 'error',\n    type: 'validation',\n    from: editor.posFromIndex(node.start),\n    to: editor.posFromIndex(node.end)\n  };\n}\n\nfunction isNullish(value) {\n  return value === null || value === undefined || value !== value;\n}\n\nfunction mapCat(array, mapper) {\n  return Array.prototype.concat.apply([], array.map(mapper));\n}"},"hash":"602bacbc2cec634472aaa305986ca284"}