{"dependencies":[{"name":"./definition","loc":{"line":8,"column":26}},{"name":"../language/kinds","loc":{"line":10,"column":21}}],"generated":{"js":"\"use strict\";function e(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(r[n]=e[n]);return r.default=e,r}function r(e){if(\"\"===e)throw new TypeError(\"Int cannot represent non 32-bit signed integer value: (empty string)\");var r=Number(e);if(r!=r||r>s||r<p)throw new TypeError(\"Int cannot represent non 32-bit signed integer value: \"+String(e));var n=Math.floor(r);if(n!==r)throw new TypeError(\"Int cannot represent non-integer value: \"+String(e));return n}function n(e){if(\"\"===e)throw new TypeError(\"Float cannot represent non numeric value: (empty string)\");var r=Number(e);if(r==r)return r;throw new TypeError(\"Float cannot represent non numeric value: \"+String(e))}function a(e){if(Array.isArray(e))throw new TypeError(\"String cannot represent an array value: [\"+String(e)+\"]\");return String(e)}Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.GraphQLID=exports.GraphQLBoolean=exports.GraphQLString=exports.GraphQLFloat=exports.GraphQLInt=void 0;var t=require(\"./definition\"),i=require(\"../language/kinds\"),o=e(i),s=2147483647,p=-2147483648,l=exports.GraphQLInt=new t.GraphQLScalarType({name:\"Int\",description:\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. \",serialize:r,parseValue:r,parseLiteral:function(e){if(e.kind===o.INT){var r=parseInt(e.value,10);if(r<=s&&r>=p)return r}return null}}),u=exports.GraphQLFloat=new t.GraphQLScalarType({name:\"Float\",description:\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). \",serialize:n,parseValue:n,parseLiteral:function(e){return e.kind===o.FLOAT||e.kind===o.INT?parseFloat(e.value):null}}),c=exports.GraphQLString=new t.GraphQLScalarType({name:\"String\",description:\"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\",serialize:a,parseValue:a,parseLiteral:function(e){return e.kind===o.STRING?e.value:null}}),h=exports.GraphQLBoolean=new t.GraphQLScalarType({name:\"Boolean\",description:\"The `Boolean` scalar type represents `true` or `false`.\",serialize:Boolean,parseValue:Boolean,parseLiteral:function(e){return e.kind===o.BOOLEAN?e.value:null}}),d=exports.GraphQLID=new t.GraphQLScalarType({name:\"ID\",description:'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.',serialize:String,parseValue:String,parseLiteral:function(e){return e.kind===o.STRING||e.kind===o.INT?e.value:null}});"},"hash":"9a31ab9ed44fa8dc5007bdaa3c13afd0"}