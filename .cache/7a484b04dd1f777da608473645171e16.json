{"dependencies":[{"name":"./definition","loc":{"line":10,"column":26}},{"name":"./directives","loc":{"line":12,"column":26}},{"name":"./introspection","loc":{"line":14,"column":29}},{"name":"../jsutils/find","loc":{"line":16,"column":20}},{"name":"../jsutils/invariant","loc":{"line":20,"column":25}},{"name":"../utilities/typeComparators","loc":{"line":24,"column":31}}],"generated":{"js":"\"use strict\";function e(e){return e&&e.__esModule?e:{default:e}}function t(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}function n(e,t){if(!t)return e;if(t instanceof a.GraphQLList||t instanceof a.GraphQLNonNull)return n(e,t.ofType);if(e[t.name])return e[t.name]!==t&&(0,y.default)(0,'Schema must contain unique named types but contains multiple types named \"'+t.name+'\".'),e;e[t.name]=t;var i=e;if(t instanceof a.GraphQLUnionType&&(i=t.getTypes().reduce(n,i)),t instanceof a.GraphQLObjectType&&(i=t.getInterfaces().reduce(n,i)),t instanceof a.GraphQLObjectType||t instanceof a.GraphQLInterfaceType){var r=t.getFields();Object.keys(r).forEach(function(e){var t=r[e];if(t.args){var a=t.args.map(function(e){return e.type});i=a.reduce(n,i)}i=n(i,t.type)})}if(t instanceof a.GraphQLInputObjectType){var o=t.getFields();Object.keys(o).forEach(function(e){var t=o[e];i=n(i,t.type)})}return i}function i(e,t,n){var i=t.getFields(),r=n.getFields();Object.keys(r).forEach(function(o){var s=i[o],p=r[o];s||(0,y.default)(0,'\"'+n.name+'\" expects field \"'+o+'\" but \"'+t.name+'\" does not provide it.'),(0,f.isTypeSubTypeOf)(e,s.type,p.type)||(0,y.default)(0,n.name+\".\"+o+' expects type \"'+String(p.type)+'\" but '+t.name+\".\"+o+' provides type \"'+String(s.type)+'\".'),p.args.forEach(function(e){var i=e.name,r=(0,u.default)(s.args,function(e){return e.name===i});r||(0,y.default)(0,n.name+\".\"+o+' expects argument \"'+i+'\" but '+t.name+\".\"+o+\" does not provide it.\"),(0,f.isEqualType)(e.type,r.type)||(0,y.default)(0,n.name+\".\"+o+\"(\"+i+':) expects type \"'+String(e.type)+'\" but '+t.name+\".\"+o+\"(\"+i+':) provides type \"'+String(r.type)+'\".')}),s.args.forEach(function(e){var i=e.name;(0,u.default)(p.args,function(e){return e.name===i})||e.type instanceof a.GraphQLNonNull&&(0,y.default)(0,t.name+\".\"+o+\"(\"+i+':) is of required type \"'+String(e.type)+'\" but is not also provided by the interface '+n.name+\".\"+o+\".\")})})}Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.GraphQLSchema=void 0;var r=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e},a=require(\"./definition\"),o=require(\"./directives\"),s=require(\"./introspection\"),p=require(\"../jsutils/find\"),u=e(p),c=require(\"../jsutils/invariant\"),y=e(c),f=require(\"../utilities/typeComparators\"),m=exports.GraphQLSchema=function(){function e(p){var u=this;t(this,e),\"object\"!==(void 0===p?\"undefined\":r(p))&&(0,y.default)(0,\"Must provide configuration object.\"),p.query instanceof a.GraphQLObjectType||(0,y.default)(0,\"Schema query must be Object Type but got: \"+String(p.query)+\".\"),this._queryType=p.query,!p.mutation||p.mutation instanceof a.GraphQLObjectType||(0,y.default)(0,\"Schema mutation must be Object Type if provided but got: \"+String(p.mutation)+\".\"),this._mutationType=p.mutation,!p.subscription||p.subscription instanceof a.GraphQLObjectType||(0,y.default)(0,\"Schema subscription must be Object Type if provided but got: \"+String(p.subscription)+\".\"),this._subscriptionType=p.subscription,p.types&&!Array.isArray(p.types)&&(0,y.default)(0,\"Schema types must be Array if provided but got: \"+String(p.types)+\".\"),!p.directives||Array.isArray(p.directives)&&p.directives.every(function(e){return e instanceof o.GraphQLDirective})||(0,y.default)(0,\"Schema directives must be Array<GraphQLDirective> if provided but got: \"+String(p.directives)+\".\"),this._directives=p.directives||o.specifiedDirectives,this.astNode=p.astNode||null;var c=[this.getQueryType(),this.getMutationType(),this.getSubscriptionType(),s.__Schema],f=p.types;f&&(c=c.concat(f)),this._typeMap=c.reduce(n,Object.create(null)),this._implementations=Object.create(null),Object.keys(this._typeMap).forEach(function(e){var t=u._typeMap[e];t instanceof a.GraphQLObjectType&&t.getInterfaces().forEach(function(e){var n=u._implementations[e.name];n?n.push(t):u._implementations[e.name]=[t]})}),Object.keys(this._typeMap).forEach(function(e){var t=u._typeMap[e];t instanceof a.GraphQLObjectType&&t.getInterfaces().forEach(function(e){return i(u,t,e)})})}return e.prototype.getQueryType=function(){return this._queryType},e.prototype.getMutationType=function(){return this._mutationType},e.prototype.getSubscriptionType=function(){return this._subscriptionType},e.prototype.getTypeMap=function(){return this._typeMap},e.prototype.getType=function(e){return this.getTypeMap()[e]},e.prototype.getPossibleTypes=function(e){return e instanceof a.GraphQLUnionType?e.getTypes():(e instanceof a.GraphQLInterfaceType||(0,y.default)(0),this._implementations[e.name])},e.prototype.isPossibleType=function(e,t){var n=this._possibleTypeMap;if(n||(this._possibleTypeMap=n=Object.create(null)),!n[e.name]){var i=this.getPossibleTypes(e);Array.isArray(i)||(0,y.default)(0,\"Could not find possible implementing types for \"+e.name+\" in schema. Check that schema.types is defined and is an array of all possible types in the schema.\"),n[e.name]=i.reduce(function(e,t){return e[t.name]=!0,e},Object.create(null))}return Boolean(n[e.name][t.name])},e.prototype.getDirectives=function(){return this._directives},e.prototype.getDirective=function(e){return(0,u.default)(this.getDirectives(),function(t){return t.name===e})},e}();"},"hash":"197e6234e2bf5926f832eeb0e512a876"}